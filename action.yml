name: 'Save Org to GitHub Environment'
description: 'Collects Salesforce org info and saves it as a GitHub environment'
inputs:
  org-alias:
    description: 'Alias of the Salesforce org'
    required: true
  create-environment:
    description: 'Whether to create a new GitHub environment'
    required: false
    default: 'false'
  environment-name:
    description: 'Name of the GitHub environment to create'
    required: false
    default: ''
  gh-token:
    description: 'The github token to use for creating environments.'
    required: true
outputs:
  org_name:
    description: 'Name of the Salesforce org'
    value: ${{ steps.process-org-info.outputs.org_name }}
  instance_url:
    description: 'Instance URL of the Salesforce org'
    value: ${{ steps.process-org-info.outputs.instance_url }}
  username:
    description: 'Username of the Salesforce org'
    value: ${{ steps.process-org-info.outputs.username }}
runs:
  using: "composite"
  steps:
    - name: Get and Process Org Info
      id: process-org-info
      shell: bash
      env:
        GH_TOKEN: ${inputs.gh-token}
      run: |
        set -e
        echo "Starting org info collection..."
        
        # Get org info
        ORG_INFO=$(cci org info ${{ inputs.org-alias }} --json)
        echo "Org info retrieved successfully."
        
        # Function to safely extract JSON values
        safe_extract() {
          echo "$ORG_INFO" | jq -r ".$1 | if type==\"string\" then . else \"\" end" || echo ""
        }
        
        # Extract information
        ORG_NAME=$(safe_extract "org_name")
        INSTANCE_URL=$(safe_extract "instance_url")
        USERNAME=$(safe_extract "username")
        SFDX_ALIAS=$(safe_extract "sfdx_alias")
        ORG_ID=$(safe_extract "org_id")
        ORG_TYPE=$(safe_extract "org_type")
        SCRATCH=$(safe_extract "scratch")
        
        echo "Information extracted successfully."
        echo "ORG_NAME: ${ORG_NAME}"
        echo "INSTANCE_URL: ${INSTANCE_URL}"
        echo "USERNAME: ${USERNAME}"
        echo "SFDX_ALIAS: ${USERNAME}"
        
        
        # Set outputs
        echo "org_name=${ORG_NAME}" >> $GITHUB_OUTPUT
        echo "instance_url=${INSTANCE_URL}" >> $GITHUB_OUTPUT
        echo "username=${USERNAME}" >> $GITHUB_OUTPUT
        
        if [[ "${{ inputs.create-environment }}" == "true" && -n "${{ inputs.environment-name }}" ]]; then
          echo "Creating/updating GitHub environment..."
          
          # Get SFDX auth URL (sensitive)
          sf org list
          sf org display --target-org "${USERNAME}"
          SFDX_AUTH_URL=$(sf org display --json --verbose --target-org "${USERNAME}" | jq -r '.result.sfdxAuthUrl')
          
          # Create or update environment
          gh api -X PUT /repos/${{ github.repository }}/environments/${{ inputs.environment-name }}
          
          # Set environment variables
          set_env_var() {
            gh api -X PUT /repos/${{ github.repository }}/environments/${{ inputs.environment-name }}/variables/$1 \
              -f name="$1" -f value="$2"
          }
          
          set_env_var "INSTANCE_URL" "${INSTANCE_URL}"
          set_env_var "USERNAME" "${USERNAME}"
          set_env_var "SFDX_ALIAS" "${SFDX_ALIAS}"
          set_env_var "ORG_ID" "${ORG_ID}"
          set_env_var "ORG_TYPE" "${ORG_TYPE}"
          set_env_var "SCRATCH" "${SCRATCH}"
          
          # Set secret
          gh secret set SFDX_AUTH_URL -b"${SFDX_AUTH_URL}" --env "${{ inputs.environment-name }}"
          
          echo "Environment '${{ inputs.environment-name }}' created/updated with necessary variables and secrets."
        fi
